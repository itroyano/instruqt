slug: developing-with-quarkus-panache
id: epiodrxuvz7f
title: Effective Data with Hibernate and Panache
description: |-
  In this scenario, you will get an introduction to **Panache**, one of the many features of [Quarkus](https://quarkus.io).

  |What you need to know before you start|
  |----|
  |In order to get full benefit from taking this track you should...<br>• Have experience programming applications in Java using the [Maven](https://maven.apache.org/) framework.<br>• Have a working knowledge using Java annotations. <br>• Have hands on knowledge executing queries in a relational database. <br>• Have a general understanding of [Object Relational Mapping](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping) (ORM). <br>• Have a basic familiarity with Quarkus as demonstrated in this [Getting Started](https://learn.openshift.com/middleware/courses/middleware-quarkus/getting-started) scenario.|

  # What is Panache?

  Hibernate ORM is the de facto JPA implementation and offers you the full breadth of an Object Relational Mapper. But many simple mappings can be complex and hard to implement. However, using Hibernate ORM with **Panache** adds a layer of ease to working with data under Quarkus.

  # What are the benefits of using Panache?

  Panache offers the following benefits:

  * By extending `PanacheEntity` in your entities, you will get an ID field that is auto-generated. However, if you require a custom ID strategy, you can extend `PanacheEntityBase` instead and provide the ID yourself.
  * Panache exposes public fields. Thus, there is no need to implement functionless getters and setters (those that get or set the value of a field). You simply refer to fields like `Person.name` without the need to write a `Person.getName()` implementation. Panache will auto-generate any getters and setters required. Still, you can develop your own getters/setters that do more than get/set.
  * The [`PanacheEntityBase`](https://github.com/quarkusio/quarkus/blob/main/extensions/panache/hibernate-orm-panache/runtime/src/main/java/io/quarkus/hibernate/orm/panache/PanacheEntityBase.java) abstract superclass comes with many useful static methods such as `list()`, `find()`, `findById()`,` findAll()` and `steam()` to name a few. Also, you can add your own methods in your derived entity class. Much like traditional object-oriented programming, it's recommended that you place custom queries as close to the entity as possible, ideally within the entity definition itself. Users can just start using an entity such as `Person` by typing `Person`, and getting auto-completion for all the operations in a single place.
  * Query expressions become more concise. For example you can write `Person.find("order by name")` or `Person.find("name = ?1 and status = ?2", "stef", Status.Alive)`. Or even better, you can write `Person.find("name", "stef")` to find an entity according to the `name`, `stef`.


  # Learning more

  You can learn more about Panache at [quarkus.io](https://quarkus.io).
icon: https://logodix.com/logo/1910931.png
level: intermediate
tags:
- prod
- openshift
owner: openshift
developers:
- doh@redhat.com
- bob@cogarttech.com
- cclyburn@redhat.com
- ryanj@redhat.com
sandbox_preset: openshift-411
lab_config:
  overlay: false
  width: 25
  position: right
  feedback_recap_enabled: true
  loadingMessages: true
  hideStopButton: false
checksum: "4169485461532060432"
