slug: developing-with-quarkus-reactive-sql
id: zyn7xvmau2y6
title: Reactive programming with Quarkus Reactive SQL
description: |-
  In this track, you will get an introduction to the reactive programming model of Quarkus

  |What you need to know before you start|
  |----|
  |In order to get full benefit from taking this track you should...<br>• Have experience programming applications in Java using the [Maven](https://maven.apache.org/) framework.<br>• Have a working knowledge using Java annotations.<br>• Have a working knowledge of working with [Object Relational Mapping](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping) (ORM) technology to enable Java code to interact with a database.<br>• Have a basic familiarity with Quarkus as demonstrated in this [Getting Started](https://learn.openshift.com/middleware/courses/middleware-quarkus/getting-started) scenario.|

  # Quarkus Unifies Imperative and Reactive Programming

  Application requirements have changed drastically over the last few years. For any application to succeed in the era of cloud computing, big data or IoT, [going reactive](https://developers.redhat.com/blog/2017/06/30/5-things-to-know-about-reactive-programming) is becoming the architecture style to follow.

  Quarkus combines both imperative coding and the non-blocking reactive styles for developing applications.

  Quarkus uses [Vert.x](https://vertx.io/docs/vertx-pg-client/java/) and [Netty] at its core. And uses a bunch of reactive frameworks and extensions on top to enable the developers. Quarkus is not just for HTTP microservices, but also for event-driven architectures. The secret behind this is to use a single reactive engine that supports both imperative and reactive code.

  ![Reactive](.\assets\vert-x-arch.png)

  Quarkus is intended to support both imperative and reactive coding. Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty). All the HTTP requests an application receives are handled by event loops on the IO Thread. Requests are then routed towards the code that manages the request. Depending on the destination, the request can invoke the code managing the request on a worker thread via the Servlet/Jax-RS or use the reactive route IO Thread.

  In this track you'll 'create a `Coffee Resource` endpoint by using JAX-RS with Quarkus backed by the Reactive SQL drivers. The demonstration application uses the PostgreSQL Reactive SQL Driver. You'll add methods for listing, adding and removing items from a list of coffee types.

  # Reactive SQL
  Historically, relational databases have not been reactive. However in recent years, advances have been made in database architecture. Today, data access via JSC can now be done reactively.

  Some of the advantages of using reactive SQL with Quarkus are:
  - A simple API focusing on scalability and low overhead.
  - Reactive and non-blocking I/O which are able to handle many database connections with a single thread.

  Learn more at [quarkus.io](https://quarkus.io)
icon: https://logodix.com/logo/1910931.png
level: intermediate
tags:
- prod
- openshift
owner: openshift
developers:
- doh@redhat.com
- bob@cogarttech.com
- null
- nvinto@redhat.com
- eshortis@redhat.com
- ryanj@redhat.com
- cclyburn@redhat.com
sandbox_preset: openshift-411
lab_config:
  overlay: false
  width: 25
  position: right
  feedback_recap_enabled: true
  loadingMessages: true
checksum: "8367982303704446760"
